 [project]
name = "scennia"
dynamic = ["version"]
authors = [
  { name = "Soren Wacker", email = "s.wacker@tudelft.nl" },
]
description = "Code for SCENNIA project."
readme = "README.md"
requires-python = ">=3.10"
dependencies = [
  "cellpose~=4.0.3",
  "dash[diskcache]~=3.0.4",
  "dash-bootstrap-components~=2.0.3",
  "gradio~=5.29.1",
  "ipykernel~=6.29.5",
  "ipywidgets~=8.1.7",
  "lightning~=2.5.1.post0",
  "matplotlib~=3.10.3",
  "nx-cugraph-cu12~=25.4.0",
  "onnx~=1.18.0",
  "onnxruntime~=1.19.0",
  "scikit-image~=0.25.2",
  "scikit-learn~=1.6.1",
  "seaborn~=0.13.2",
  "tensorboard~=2.19.0",
  "wandb~=0.19.11",
  "orjson~=3.10.18",
  "pillow~=11.2.1",
  "pydantic>=2.11.5",
]

[tool.uv]
dev-dependencies = [
  "hatch>=1.13.0,<2",
  "pre-commit>=3.8.0,<4",
  "pytest>=8.3.3,<9",
  "pytest-cov>=5.0.0,<6",
  "mkdocstrings[python]>=0.26.1,<1",
  "mkdocs-material>=9.5.39,<10",
  "setuptools-scm>=8.1.0,<9",
]

[tool.uv.sources]
nx-cugraph-cu12 = { index = "nvidia" }

[[tool.uv.index]]
name = "nvidia"
url = "https://pypi.nvidia.com"
explicit = true

[build-system]
requires = ["hatchling", "hatch-vcs"]
build-backend = "hatchling.build"

[tool.hatch.version]
source = "vcs"

[tool.hatch.build.hooks.vcs]
version-file = "_version.py"

[project.urls]
Homepage = "https://gitlab.ewi.tudelft.nl/reit/scennia"

[project.scripts]
scennia_preprocessing = "scennia.preprocessing:main"
scennia_train_model = "scennia.train_model:main"
scennia_app = "scennia.app:main"

[tool.pytest.ini_options]
minversion = "6.0"
addopts = ["-ra", "--showlocals", "--strict-markers", "--strict-config"]
xfail_strict = true
filterwarnings = [
  "error",
]
log_cli_level = "INFO"
testpaths = [
  "tests",
]

[tool.coverage]
run.source = ["scennia"]
port.exclude_lines = [
  'pragma: no cover',
  '\.\.\.',
  'if typing.TYPE_CHECKING:',
]

[tool.ruff]
src = ["src"]
exclude = []
line-length = 120  # how long you want lines to be

[tool.ruff.format]
docstring-code-format = true  # code snippets in docstrings will be formatted
preview = true


[tool.ruff.lint]
# For more strict linting and code simplifications, replace this with
# https://github.com/NLeSC/python-template/blob/main/template/pyproject.toml.jinja#L121-L136
select = [
  "E", "F", "W", # flake8
  "B",           # flake8-bugbear
  "I",           # isort
  "ARG",         # flake8-unused-arguments
  "C4",          # flake8-comprehensions
  "EM",          # flake8-errmsg
  "ICN",         # flake8-import-conventions
  "ISC",         # flake8-implicit-str-concat
  "G",           # flake8-logging-format
  "PGH",         # pygrep-hooks
  "PIE",         # flake8-pie
  "PL",          # pylint
  "PT",          # flake8-pytest-style
  "RET",         # flake8-return
  "RUF",         # Ruff-specific
  "SIM",         # flake8-simplify
  "UP",          # pyupgrade
  "YTT",         # flake8-2020
  "EXE",         # flake8-executable
  # "D",           # pydocstyle, uncomment to have the docstrings linted
  # "ANN",         # flake8-annotations, uncomment to have type hint annotations linted
]
ignore = [
  "PLR",    # Design related pylint codes
  "ISC001", # Conflicts with formatter
]
pydocstyle.convention = "google"

[tool.ruff.lint.per-file-ignores]
# Tests can ignore a few extra rules
"tests/**.py" = [
    "ANN201", # Missing return type annotation for public function
    "D103",   # Missing docstring
    "S101",   # Use of assert is detected
    "INP001", # Missing __init__.py file
]

[tool.yamlfix]
line_length = 120
sequence_style = "keep_style"
explicit_start = false
whitelines = 1
section_whitelines = 1
